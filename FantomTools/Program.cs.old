using System.IO.Compression;
using System.Text;
using FantomEditor.FantomPod.FantomCode;
using FantomEditor.FCode;
using FantomEditor.FCode.Operations;

if (args.Length < 3)
{
    Console.WriteLine($"usage: FantomEditor mode in out");
    Console.WriteLine("Valid modes: decompile, compile, dump");
    Console.WriteLine("Decompile converts a fantom pod file to a folder");
    Console.WriteLine("Compile converts a folder back into a fantom pod file");
    Environment.Exit(-1);
}
var mode = args[0];
var input = args[1];
var output = args[2];

switch (mode)
{
    case "decompile":
    {
        var podPath = new FileInfo(input);
        // let's not do the output just yet
        var pod = new FPod(podPath);
        // pod.EmitDecompiled(new DirectoryInfo(output));
        var mPod = pod.ToMemoryPod();
        var cursor = mPod.GetType("Main").GetMethod("main").Body.Cursor;
        cursor.Seek(x => x.OpCode == OperationType.JumpFalse);
        cursor.Current.OpCode = OperationType.JumpTrue;
        // foreach (var type in mPod.Types)
        // {
        //     Console.WriteLine(type.Dump(true));
        // }

        if (File.Exists(output))
        {
            File.Delete(output);
        }
        using var outPod = ZipFile.Open(output, ZipArchiveMode.Create);
        mPod.WritePod(outPod);
        break;
    }
    case "compile":
        Console.WriteLine("Fantom recompilation is not yet supported!");
        Environment.Exit(-2);
        break;
    case "dump":
    {
        var podPath = new FileInfo(input);
        using var pod = new FPod(podPath);
        using var mPod = pod.ToMemoryPod();
        var sb = new StringBuilder();
        foreach (var type in mPod.Types)
        {
            sb.AppendLine(type.Dump(true));
        }

        File.WriteAllText(output, sb.ToString());
        break;
    }
    default:
        Console.WriteLine("Unknown ");
        Environment.Exit(-3);
        break;
}